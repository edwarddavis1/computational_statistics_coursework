sourceCpp(code = '
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export(name = "vsumVett")]]
NumericVector vsum_I(const NumericVector x1, const NumericVector x2)
{
return x1 + x2;
}')
library(Rcpp)
library(Rcpp)
sourceCpp(code = '
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export(name = "vsumVett")]]
NumericVector vsum_I(const NumericVector x1, const NumericVector x2)
{
return x1 + x2;
}')
vsumVett(c(1,2), c(3,4))
# Example: Standard Rcpp
library(Rcpp)
sourceCpp(code = '
#include <Rcpp.h>
// [[Rcpp::export(name = "vsum")]]
Rcpp::NumericVector vsum_I(const Rcpp::NumericVector x1, const Rcpp::NumericVector x2)
{
int ni = x1.size();
Rcpp::NumericVector out(ni);
for(int ii = 0; ii < ni; ii++){
out[ii] = x1[ii] + x2[ii];
}
return out;
}')
vsum(c(1,2), c(3,4))
vsumVett(c(1,2), c(3,4))
microbenchmark(R = x1 + x2, Rcpp = vsum(x1, x2), RcppSugar = vsumVett(x1, x2))
d <- 1e2
x1 <- rnorm(d)
x2 <- rnorm(d)
microbenchmark(R = x1 + x2, Rcpp = vsum(x1, x2), RcppSugar = vsumVett(x1, x2))
library(microbenchmark)
microbenchmark(R = x1 + x2, Rcpp = vsum(x1, x2), RcppSugar = vsumVett(x1, x2))
sourceCpp(code = '
#include <Rcpp.h>
// [[Rcpp::export(name = "is_positive)]]
Rcpp::NumericVector is_positive_I(Rcpp::NumericVector num)
{
return num > 0;
}
')
sourceCpp(code = '
#include <Rcpp.h>
using namespace Rcpp;
// [[Rcpp::export(name = "inRange")]]
LogicalVector inRange_I(const NumericVector x, const NumericVector u, const NumericVector l)
{
return x > l & x < u;
}')
sourceCpp(code = '
#include <Rcpp.h>
// [[Rcpp::export(name = "is_positive)]]
Rcpp::LogicalVector is_positive_I(Rcpp::NumericVector num)
{
return num > 0;
}
')
sourceCpp(code = '
#include <Rcpp.h>
// [[Rcpp::export(name = "is_positive")]]
Rcpp::LogicalVector is_positive_I(Rcpp::NumericVector num)
{
return num > 0;
}
')
is_positive(5)
is_positive(-5)
is_positive(5)
is_positive(-5)
sourceCpp(code = '
#include <Rcpp.h>
// [[Rcpp::export(name = "is_equal")]]
Rcpp::LogicalVector is_equal_I(Rcpp::NumericVector num1, Rcpp::NumericVector num2)
{
return num1 == num2;
}
')
is_equal(5, 5)
is_equal(5,6)
